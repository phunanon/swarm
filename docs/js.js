/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var scale = 6;
var ants = [];
var foods = [];
var home = { x: 0, y: 0, radius: 4 };
var collected = 0;
window.addEventListener('DOMContentLoaded', function () {
    var _a;
    var ctx = (_a = document.querySelector('canvas')) === null || _a === void 0 ? void 0 : _a.getContext('2d');
    if (!ctx)
        return;
    ctx.canvas.addEventListener('mousemove', function (e) {
        home.x = e.offsetX / scale;
        home.y = e.offsetY / scale;
    });
    var width = document.body.offsetWidth / scale;
    var height = document.body.offsetHeight / scale;
    ants.push.apply(ants, new Array(512).fill(0).map(function () { return (__assign(__assign({ x: Math.random() * width, y: Math.random() * height, radius: 16 }, { home: 0, food: 0, wandering: true, carrying: false }), { direction: Math.random() * Math.PI * 2 })); }));
    foods.push.apply(foods, new Array(3).fill(0).map(function () { return ({
        x: Math.random() * width,
        y: Math.random() * height,
        radius: 4,
    }); }));
    home.x = 32;
    home.y = height / 2;
    Render(ctx);
});
var Render = function (ctx) {
    var width = document.body.offsetWidth;
    var height = document.body.offsetHeight;
    ctx.canvas.style.width = "".concat((ctx.canvas.width = width));
    ctx.canvas.style.height = "".concat((ctx.canvas.height = height));
    ctx.fillStyle = 'rgba(255, 255, 255, 0.25)';
    ctx.fillRect(0, 0, width, height);
    ctx.save();
    ctx.scale(scale, scale);
    ants.forEach(function (ant) {
        ctx.fillStyle = ant.carrying ? 'red' : 'black';
        ctx.fillRect(ant.x, ant.y, 1, 1);
    });
    ctx.fillStyle = 'blue';
    foods.forEach(function (food) {
        ctx.beginPath();
        ctx.arc(food.x, food.y, food.radius, 0, 2 * Math.PI);
        ctx.fill();
    });
    ctx.fillStyle = 'green';
    ctx.beginPath();
    ctx.arc(home.x, home.y, home.radius, 0, 2 * Math.PI);
    ctx.fill();
    var updates = Update();
    updates.forEach(function (_a) {
        var x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3], food = _a[4];
        ctx.strokeStyle = "rgba(0, ".concat(food ? 0 : 255, ", ").concat(food ? 255 : 0, ", 0.1)");
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    });
    ctx.fillStyle = 'black';
    ctx.font = '8px monospace';
    ctx.fillText("Collected ".concat(collected), 2, 8);
    ctx.restore();
    setTimeout(function () { return Render(ctx); }, 10);
};
var Update = function () {
    var updates = [];
    var near = function (ant, thing) {
        return ant.x > thing.x - thing.radius &&
            ant.x < thing.x + thing.radius &&
            ant.y > thing.y - thing.radius &&
            ant.y < thing.y + thing.radius;
    };
    ants.forEach(function (ant) {
        ant.x += Math.cos(ant.direction);
        ant.y += Math.sin(ant.direction);
        if (ant.x < 0) {
            ant.direction = Math.PI - ant.direction;
            ant.wandering = true;
        }
        if (ant.x > document.body.offsetWidth / scale) {
            ant.direction = Math.PI - ant.direction;
            ant.wandering = true;
        }
        if (ant.y < 0) {
            ant.direction = -ant.direction;
            ant.wandering = true;
        }
        if (ant.y > document.body.offsetHeight / scale) {
            ant.direction = -ant.direction;
            ant.wandering = true;
        }
        if (near(ant, home) && ant.carrying) {
            ant.carrying = false;
            ant.home = 0;
            ant.direction += Math.PI;
            ++collected;
        }
        if (!ant.carrying) {
            foods.forEach(function (food) {
                if (near(ant, food)) {
                    ant.carrying = true;
                    ant.food = 0;
                    ant.direction += Math.PI;
                    food.radius -= 0.001;
                    if (food.radius < 1) {
                        food.x = (Math.random() * document.body.offsetWidth) / scale;
                        food.y = (Math.random() * document.body.offsetHeight) / scale;
                        food.radius = 4;
                    }
                }
            });
        }
        if (ant.wandering) {
            ant.direction += Math.random() * 0.1 - 0.05;
        }
        ++ant.food;
        ++ant.home;
    });
    ants.forEach(function (ant) {
        ants.forEach(function (other) {
            if (ant === other)
                return;
            if (near(ant, other)) {
                var f = ant.food + ant.radius;
                var h = ant.home + ant.radius;
                var updateFood = !other.carrying && f < other.food;
                var updateHome = other.carrying && h < other.home;
                var newDir = Math.atan2(ant.y - other.y, ant.x - other.x) +
                    Math.random() * 0.1 -
                    0.05;
                if (updateFood) {
                    other.food = f;
                    other.direction = newDir;
                    updates.push;
                }
                else if (updateHome) {
                    other.home = h;
                    other.direction = newDir;
                }
                if (updateFood || updateHome) {
                    other.wandering = false;
                    updates.push([ant.x, ant.y, other.x, other.y, updateFood]);
                }
            }
        });
    });
    return updates;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,