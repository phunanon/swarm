/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var scale = 6;
var speed = 1;
var ants = [];
var foods = [];
var home = { x: 0, y: 0, radius: 4 };
var collected = 0;
window.addEventListener('DOMContentLoaded', function () {
    var _a;
    var ctx = (_a = document.querySelector('canvas')) === null || _a === void 0 ? void 0 : _a.getContext('2d');
    if (!ctx)
        return;
    ctx.canvas.addEventListener('mousemove', function (e) {
        home.x = e.offsetX / scale;
        home.y = e.offsetY / scale;
    });
    var width = document.body.offsetWidth / scale;
    var height = document.body.offsetHeight / scale;
    ants.push.apply(ants, new Array(512).fill(0).map(function () { return (__assign(__assign({ x: Math.random() * width, y: Math.random() * height, radius: 16 }, { home: 0, food: 0, wandering: true, carrying: false }), { direction: Math.random() * Math.PI * 2 })); }));
    foods.push.apply(foods, new Array(3).fill(0).map(function () { return ({
        x: Math.random() * width,
        y: Math.random() * height,
        radius: 4,
    }); }));
    home.x = 32;
    home.y = height / 2;
    Render(ctx);
});
var Render = function (ctx) {
    var width = document.body.offsetWidth;
    var height = document.body.offsetHeight;
    ctx.canvas.style.width = "".concat((ctx.canvas.width = width));
    ctx.canvas.style.height = "".concat((ctx.canvas.height = height));
    ctx.fillStyle = 'rgba(255, 255, 255, 0.25)';
    ctx.fillRect(0, 0, width, height);
    ctx.save();
    ctx.scale(scale, scale);
    ants.forEach(function (ant) {
        ctx.fillStyle = ant.carrying ? 'red' : 'black';
        ctx.fillRect(ant.x, ant.y, 1, 1);
    });
    ctx.fillStyle = 'blue';
    foods.forEach(function (food) {
        ctx.beginPath();
        ctx.arc(food.x, food.y, food.radius, 0, 2 * Math.PI);
        ctx.fill();
    });
    ctx.fillStyle = 'green';
    ctx.beginPath();
    ctx.arc(home.x, home.y, home.radius, 0, 2 * Math.PI);
    ctx.fill();
    var updates = Update();
    updates.forEach(function (_a) {
        var x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3], food = _a[4];
        ctx.strokeStyle = "rgba(0, ".concat(food ? 0 : 255, ", ").concat(food ? 255 : 0, ", 0.05)");
        ctx.beginPath();
        ctx.moveTo(x1 + 0.5, y1 + 0.5);
        ctx.lineTo(x2 + 0.5, y2 + 0.5);
        ctx.stroke();
    });
    ctx.fillStyle = 'black';
    ctx.font = '8px monospace';
    ctx.fillText("Collected ".concat(collected), 2, 8);
    ctx.restore();
    setTimeout(function () { return Render(ctx); }, 10);
};
var near = function (ant, thing) {
    return ant.x > thing.x - thing.radius &&
        ant.x < thing.x + thing.radius &&
        ant.y > thing.y - thing.radius &&
        ant.y < thing.y + thing.radius;
};
var Update = function () {
    var updates = [];
    ants.forEach(function (ant) {
        ant.x += Math.cos(ant.direction) * speed;
        ant.y += Math.sin(ant.direction) * speed;
        if (ant.x < 0) {
            ant.direction = Math.PI - ant.direction;
            ant.wandering = true;
        }
        if (ant.x > document.body.offsetWidth / scale) {
            ant.direction = Math.PI - ant.direction;
            ant.wandering = true;
        }
        if (ant.y < 0) {
            ant.direction = -ant.direction;
            ant.wandering = true;
        }
        if (ant.y > document.body.offsetHeight / scale) {
            ant.direction = -ant.direction;
            ant.wandering = true;
        }
        if (near(ant, home) && ant.carrying) {
            ant.carrying = false;
            ant.home = 0;
            ant.direction += Math.PI;
            ++collected;
        }
        if (!ant.carrying) {
            foods.forEach(function (food) {
                if (near(ant, food)) {
                    ant.carrying = true;
                    ant.food = 0;
                    ant.direction += Math.PI;
                    food.radius -= 0.001;
                    if (food.radius < 1) {
                        food.x = (Math.random() * document.body.offsetWidth) / scale;
                        food.y = (Math.random() * document.body.offsetHeight) / scale;
                        food.radius = 4;
                    }
                }
            });
        }
        if (ant.wandering) {
            ant.direction += Math.random() * 0.1 - 0.05;
        }
        ++ant.food;
        ++ant.home;
    });
    ants.forEach(function (ant) {
        ants.forEach(function (other) {
            if (ant === other)
                return;
            if (near(ant, other)) {
                var f = ant.food + ant.radius;
                var h = ant.home + ant.radius;
                var updateFood = !other.carrying && f < other.food;
                var updateHome = other.carrying && h < other.home;
                var newDir = Math.atan2(ant.y - other.y, ant.x - other.x) +
                    Math.random() * 0.1 -
                    0.05;
                if (updateFood) {
                    other.food = f;
                    other.direction = newDir;
                    updates.push;
                }
                else if (updateHome) {
                    other.home = h;
                    other.direction = newDir;
                }
                if (updateFood || updateHome) {
                    other.wandering = false;
                    updates.push([ant.x, ant.y, other.x, other.y, updateFood]);
                }
            }
        });
    });
    return updates;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLEdBQUc7b0JBQ25CLElBQUksQ0FBQztnQkFDUCxJQUFJLFVBQVUsRUFBRTtvQkFDZCxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztvQkFDZixLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztvQkFDekIsT0FBTyxDQUFDLElBQUksQ0FBQztpQkFDZDtxQkFBTSxJQUFJLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7b0JBQ2YsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7aUJBQzFCO2dCQUNELElBQUksVUFBVSxJQUFJLFVBQVUsRUFBRTtvQkFDNUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBQzVEO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDOzs7Ozs7OztVRXhMRjtVQUNBO1VBQ0E7VUFDQTtVQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3dhcm0vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vc3dhcm0vd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly9zd2FybS93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vc3dhcm0vd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgVmVjID0geyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xyXG50eXBlIEFudCA9IFZlYyAmIHtcclxuICByYWRpdXM6IG51bWJlcjtcclxuICBkaXJlY3Rpb246IG51bWJlcjtcclxuICBob21lOiBudW1iZXI7XHJcbiAgZm9vZDogbnVtYmVyO1xyXG4gIHdhbmRlcmluZzogYm9vbGVhbjtcclxuICBjYXJyeWluZzogYm9vbGVhbjtcclxufTtcclxudHlwZSBGb29kID0gVmVjICYgeyByYWRpdXM6IG51bWJlciB9O1xyXG5cclxuY29uc3Qgc2NhbGUgPSA2O1xyXG5jb25zdCBzcGVlZCA9IDE7XHJcbmNvbnN0IGFudHM6IEFudFtdID0gW107XHJcbmNvbnN0IGZvb2RzOiBGb29kW10gPSBbXTtcclxuY29uc3QgaG9tZSA9IHsgeDogMCwgeTogMCwgcmFkaXVzOiA0IH07XHJcbmxldCBjb2xsZWN0ZWQgPSAwO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgY29uc3QgY3R4ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJyk/LmdldENvbnRleHQoJzJkJyk7XHJcbiAgaWYgKCFjdHgpIHJldHVybjtcclxuICBjdHguY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGUgPT4ge1xyXG4gICAgaG9tZS54ID0gZS5vZmZzZXRYIC8gc2NhbGU7XHJcbiAgICBob21lLnkgPSBlLm9mZnNldFkgLyBzY2FsZTtcclxuICB9KTtcclxuXHJcbiAgY29uc3Qgd2lkdGggPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC8gc2NhbGU7XHJcbiAgY29uc3QgaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgLyBzY2FsZTtcclxuXHJcbiAgYW50cy5wdXNoKFxyXG4gICAgLi4ubmV3IEFycmF5KDUxMikuZmlsbCgwKS5tYXAoKCkgPT4gKHtcclxuICAgICAgLi4ueyB4OiBNYXRoLnJhbmRvbSgpICogd2lkdGgsIHk6IE1hdGgucmFuZG9tKCkgKiBoZWlnaHQsIHJhZGl1czogMTYgfSxcclxuICAgICAgLi4ueyBob21lOiAwLCBmb29kOiAwLCB3YW5kZXJpbmc6IHRydWUsIGNhcnJ5aW5nOiBmYWxzZSB9LFxyXG4gICAgICBkaXJlY3Rpb246IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMixcclxuICAgIH0pKVxyXG4gICk7XHJcbiAgZm9vZHMucHVzaChcclxuICAgIC4uLm5ldyBBcnJheSgzKS5maWxsKDApLm1hcCgoKSA9PiAoe1xyXG4gICAgICB4OiBNYXRoLnJhbmRvbSgpICogd2lkdGgsXHJcbiAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiBoZWlnaHQsXHJcbiAgICAgIHJhZGl1czogNCxcclxuICAgIH0pKVxyXG4gICk7XHJcblxyXG4gIGhvbWUueCA9IDMyO1xyXG4gIGhvbWUueSA9IGhlaWdodCAvIDI7XHJcblxyXG4gIFJlbmRlcihjdHgpO1xyXG59KTtcclxuXHJcbmNvbnN0IFJlbmRlciA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4ge1xyXG4gIGNvbnN0IHdpZHRoID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcclxuICBjb25zdCBoZWlnaHQgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcclxuICBjdHguY2FudmFzLnN0eWxlLndpZHRoID0gYCR7KGN0eC5jYW52YXMud2lkdGggPSB3aWR0aCl9YDtcclxuICBjdHguY2FudmFzLnN0eWxlLmhlaWdodCA9IGAkeyhjdHguY2FudmFzLmhlaWdodCA9IGhlaWdodCl9YDtcclxuICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSknO1xyXG4gIGN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgY3R4LnNhdmUoKTtcclxuICBjdHguc2NhbGUoc2NhbGUsIHNjYWxlKTtcclxuXHJcbiAgYW50cy5mb3JFYWNoKGFudCA9PiB7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gYW50LmNhcnJ5aW5nID8gJ3JlZCcgOiAnYmxhY2snO1xyXG4gICAgY3R4LmZpbGxSZWN0KGFudC54LCBhbnQueSwgMSwgMSk7XHJcbiAgfSk7XHJcbiAgY3R4LmZpbGxTdHlsZSA9ICdibHVlJztcclxuICBmb29kcy5mb3JFYWNoKGZvb2QgPT4ge1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmFyYyhmb29kLngsIGZvb2QueSwgZm9vZC5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGN0eC5maWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIGN0eC5maWxsU3R5bGUgPSAnZ3JlZW4nO1xyXG4gIGN0eC5iZWdpblBhdGgoKTtcclxuICBjdHguYXJjKGhvbWUueCwgaG9tZS55LCBob21lLnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gIGN0eC5maWxsKCk7XHJcblxyXG4gIGNvbnN0IHVwZGF0ZXMgPSBVcGRhdGUoKTtcclxuICB1cGRhdGVzLmZvckVhY2goKFt4MSwgeTEsIHgyLCB5MiwgZm9vZF0pID0+IHtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IGByZ2JhKDAsICR7Zm9vZCA/IDAgOiAyNTV9LCAke2Zvb2QgPyAyNTUgOiAwfSwgMC4wNSlgO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4Lm1vdmVUbyh4MSArIDAuNSwgeTEgKyAwLjUpO1xyXG4gICAgY3R4LmxpbmVUbyh4MiArIDAuNSwgeTIgKyAwLjUpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG4gIH0pO1xyXG5cclxuICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICBjdHguZm9udCA9ICc4cHggbW9ub3NwYWNlJztcclxuICBjdHguZmlsbFRleHQoYENvbGxlY3RlZCAke2NvbGxlY3RlZH1gLCAyLCA4KTtcclxuXHJcbiAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgc2V0VGltZW91dCgoKSA9PiBSZW5kZXIoY3R4KSwgMTApO1xyXG59O1xyXG5cclxuY29uc3QgbmVhciA9IChhbnQ6IEFudCwgdGhpbmc6IFZlYyAmIHsgcmFkaXVzOiBudW1iZXIgfSkgPT5cclxuICBhbnQueCA+IHRoaW5nLnggLSB0aGluZy5yYWRpdXMgJiZcclxuICBhbnQueCA8IHRoaW5nLnggKyB0aGluZy5yYWRpdXMgJiZcclxuICBhbnQueSA+IHRoaW5nLnkgLSB0aGluZy5yYWRpdXMgJiZcclxuICBhbnQueSA8IHRoaW5nLnkgKyB0aGluZy5yYWRpdXM7XHJcblxyXG5jb25zdCBVcGRhdGUgPSAoKSA9PiB7XHJcbiAgY29uc3QgdXBkYXRlczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgYm9vbGVhbl1bXSA9IFtdO1xyXG5cclxuICBhbnRzLmZvckVhY2goYW50ID0+IHtcclxuICAgIGFudC54ICs9IE1hdGguY29zKGFudC5kaXJlY3Rpb24pICogc3BlZWQ7XHJcbiAgICBhbnQueSArPSBNYXRoLnNpbihhbnQuZGlyZWN0aW9uKSAqIHNwZWVkO1xyXG5cclxuICAgIGlmIChhbnQueCA8IDApIHtcclxuICAgICAgYW50LmRpcmVjdGlvbiA9IE1hdGguUEkgLSBhbnQuZGlyZWN0aW9uO1xyXG4gICAgICBhbnQud2FuZGVyaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChhbnQueCA+IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLyBzY2FsZSkge1xyXG4gICAgICBhbnQuZGlyZWN0aW9uID0gTWF0aC5QSSAtIGFudC5kaXJlY3Rpb247XHJcbiAgICAgIGFudC53YW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGFudC55IDwgMCkge1xyXG4gICAgICBhbnQuZGlyZWN0aW9uID0gLWFudC5kaXJlY3Rpb247XHJcbiAgICAgIGFudC53YW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGFudC55ID4gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQgLyBzY2FsZSkge1xyXG4gICAgICBhbnQuZGlyZWN0aW9uID0gLWFudC5kaXJlY3Rpb247XHJcbiAgICAgIGFudC53YW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZWFyKGFudCwgaG9tZSkgJiYgYW50LmNhcnJ5aW5nKSB7XHJcbiAgICAgIGFudC5jYXJyeWluZyA9IGZhbHNlO1xyXG4gICAgICBhbnQuaG9tZSA9IDA7XHJcbiAgICAgIGFudC5kaXJlY3Rpb24gKz0gTWF0aC5QSTtcclxuICAgICAgKytjb2xsZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhbnQuY2FycnlpbmcpIHtcclxuICAgICAgZm9vZHMuZm9yRWFjaChmb29kID0+IHtcclxuICAgICAgICBpZiAobmVhcihhbnQsIGZvb2QpKSB7XHJcbiAgICAgICAgICBhbnQuY2FycnlpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgYW50LmZvb2QgPSAwO1xyXG4gICAgICAgICAgYW50LmRpcmVjdGlvbiArPSBNYXRoLlBJO1xyXG4gICAgICAgICAgZm9vZC5yYWRpdXMgLT0gMC4wMDE7XHJcbiAgICAgICAgICBpZiAoZm9vZC5yYWRpdXMgPCAxKSB7XHJcbiAgICAgICAgICAgIGZvb2QueCA9IChNYXRoLnJhbmRvbSgpICogZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCkgLyBzY2FsZTtcclxuICAgICAgICAgICAgZm9vZC55ID0gKE1hdGgucmFuZG9tKCkgKiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCkgLyBzY2FsZTtcclxuICAgICAgICAgICAgZm9vZC5yYWRpdXMgPSA0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFudC53YW5kZXJpbmcpIHtcclxuICAgICAgYW50LmRpcmVjdGlvbiArPSBNYXRoLnJhbmRvbSgpICogMC4xIC0gMC4wNTtcclxuICAgIH1cclxuICAgICsrYW50LmZvb2Q7XHJcbiAgICArK2FudC5ob21lO1xyXG4gIH0pO1xyXG5cclxuICBhbnRzLmZvckVhY2goYW50ID0+IHtcclxuICAgIGFudHMuZm9yRWFjaChvdGhlciA9PiB7XHJcbiAgICAgIGlmIChhbnQgPT09IG90aGVyKSByZXR1cm47XHJcbiAgICAgIGlmIChuZWFyKGFudCwgb3RoZXIpKSB7XHJcbiAgICAgICAgY29uc3QgZiA9IGFudC5mb29kICsgYW50LnJhZGl1cztcclxuICAgICAgICBjb25zdCBoID0gYW50LmhvbWUgKyBhbnQucmFkaXVzO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUZvb2QgPSAhb3RoZXIuY2FycnlpbmcgJiYgZiA8IG90aGVyLmZvb2Q7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlSG9tZSA9IG90aGVyLmNhcnJ5aW5nICYmIGggPCBvdGhlci5ob21lO1xyXG4gICAgICAgIGNvbnN0IG5ld0RpciA9XHJcbiAgICAgICAgICBNYXRoLmF0YW4yKGFudC55IC0gb3RoZXIueSwgYW50LnggLSBvdGhlci54KSArXHJcbiAgICAgICAgICBNYXRoLnJhbmRvbSgpICogMC4xIC1cclxuICAgICAgICAgIDAuMDU7XHJcbiAgICAgICAgaWYgKHVwZGF0ZUZvb2QpIHtcclxuICAgICAgICAgIG90aGVyLmZvb2QgPSBmO1xyXG4gICAgICAgICAgb3RoZXIuZGlyZWN0aW9uID0gbmV3RGlyO1xyXG4gICAgICAgICAgdXBkYXRlcy5wdXNoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodXBkYXRlSG9tZSkge1xyXG4gICAgICAgICAgb3RoZXIuaG9tZSA9IGg7XHJcbiAgICAgICAgICBvdGhlci5kaXJlY3Rpb24gPSBuZXdEaXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1cGRhdGVGb29kIHx8IHVwZGF0ZUhvbWUpIHtcclxuICAgICAgICAgIG90aGVyLndhbmRlcmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgdXBkYXRlcy5wdXNoKFthbnQueCwgYW50LnksIG90aGVyLngsIG90aGVyLnksIHVwZGF0ZUZvb2RdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdXBkYXRlcztcclxufTtcclxuIiwiIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbl9fd2VicGFja19tb2R1bGVzX19bXCIuL3NyYy9pbmRleC50c1wiXSgpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9