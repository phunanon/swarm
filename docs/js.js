/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var scale = 6;
var speed = 1;
var screamRadius = 16;
var ants = [];
var foods = [];
var home = { x: 0, y: 0, radius: 4 };
var collected = 0;
var w = function () { return document.body.offsetWidth / scale; };
var h = function () { return document.body.offsetHeight / scale; };
window.addEventListener('DOMContentLoaded', function () {
    var _a;
    var ctx = (_a = document.querySelector('canvas')) === null || _a === void 0 ? void 0 : _a.getContext('2d');
    if (!ctx)
        return;
    ctx.canvas.addEventListener('mousemove', function (e) {
        home.x = e.offsetX / scale;
        home.y = e.offsetY / scale;
    });
    ants.push.apply(ants, new Array(512).fill(0).map(function () { return (__assign(__assign({ x: Math.random() * w(), y: Math.random() * h() }, { home: 0, food: 0, wandering: true, carrying: false }), { direction: Math.random() * Math.PI * 2 })); }));
    foods.push.apply(foods, new Array(3).fill(0).map(function () { return ({
        x: Math.random() * w(),
        y: Math.random() * h(),
        radius: 4,
        direction: Math.random() * Math.PI * 2,
    }); }));
    home.x = 32;
    home.y = h() / 2;
    Render(ctx);
});
var Render = function (ctx) {
    var width = document.body.offsetWidth;
    var height = document.body.offsetHeight;
    ctx.canvas.style.width = "".concat((ctx.canvas.width = width));
    ctx.canvas.style.height = "".concat((ctx.canvas.height = height));
    ctx.fillStyle = 'rgba(255, 255, 255, 0.25)';
    ctx.fillRect(0, 0, width, height);
    ctx.save();
    ctx.scale(scale, scale);
    ants.forEach(function (ant) {
        ctx.fillStyle = ant.carrying ? 'red' : 'black';
        ctx.fillRect(ant.x, ant.y, 1, 1);
    });
    ctx.fillStyle = 'blue';
    foods.forEach(function (food) {
        ctx.beginPath();
        ctx.arc(food.x, food.y, food.radius, 0, 2 * Math.PI);
        ctx.fill();
    });
    ctx.fillStyle = 'green';
    ctx.beginPath();
    ctx.arc(home.x, home.y, home.radius, 0, 2 * Math.PI);
    ctx.fill();
    var updates = Update();
    updates.forEach(function (_a) {
        var x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3], food = _a[4], home = _a[5];
        ctx.strokeStyle = "rgba(".concat(food && home ? 128 : 0, ", ").concat(food && !home ? 0 : 128, ", ").concat(food && !home ? 128 : 0, ", 0.05)");
        ctx.beginPath();
        ctx.moveTo(x1 + 0.5, y1 + 0.5);
        ctx.lineTo(x2 + 0.5, y2 + 0.5);
        ctx.stroke();
    });
    ctx.fillStyle = 'black';
    ctx.font = '8px monospace';
    ctx.fillText("Collected ".concat(collected), 2, 8);
    ctx.restore();
    setTimeout(function () { return Render(ctx); }, 10);
};
var near = function (a, b, radius) {
    return a.x > b.x - radius &&
        a.x < b.x + radius &&
        a.y > b.y - radius &&
        a.y < b.y + radius;
};
var Update = function () {
    var updates = [];
    foods.forEach(function (food) {
        food.x += Math.cos(food.direction) * speed * 0.2;
        food.y += Math.sin(food.direction) * speed * 0.2;
        if (food.x < food.radius) {
            food.direction = Math.PI - food.direction;
            food.x = food.radius;
        }
        if (food.x + food.radius > w()) {
            food.direction = Math.PI - food.direction;
            food.x = w() - food.radius;
        }
        if (food.y < food.radius) {
            food.direction = -food.direction;
            food.y = food.radius;
        }
        if (food.y + food.radius > h()) {
            food.direction = -food.direction;
        }
    });
    ants.forEach(function (ant) {
        ant.x += Math.cos(ant.direction) * speed;
        ant.y += Math.sin(ant.direction) * speed;
        if (ant.x < 0) {
            ant.direction = Math.PI - ant.direction;
            ant.x = 0;
            ant.wandering = true;
        }
        if (ant.x > w()) {
            ant.direction = Math.PI - ant.direction;
            ant.x = w();
            ant.wandering = true;
        }
        if (ant.y < 0) {
            ant.direction = -ant.direction;
            ant.y = 0;
            ant.wandering = true;
        }
        if (ant.y > h()) {
            ant.direction = -ant.direction;
            ant.y = h();
            ant.wandering = true;
        }
        if (near(ant, home, home.radius) && ant.carrying) {
            ant.carrying = false;
            ant.home = 0;
            ant.direction += Math.PI;
            ++collected;
        }
        if (!ant.carrying) {
            foods.forEach(function (food) {
                if (near(ant, food, food.radius)) {
                    ant.carrying = true;
                    ant.food = 0;
                    ant.direction += Math.PI;
                    food.radius -= 0.001;
                    if (food.radius < 1) {
                        food.x = Math.random() * w();
                        food.y = Math.random() * h();
                        food.radius = 4;
                        food.direction = Math.random() * Math.PI * 2;
                    }
                }
            });
        }
        if (ant.wandering) {
            ant.direction += Math.random() * 0.1 - 0.05;
        }
        ++ant.food;
        ++ant.home;
    });
    ants.forEach(function (ant) {
        ants.forEach(function (other) {
            if (ant === other)
                return;
            if (!near(ant, other, screamRadius))
                return;
            var f = ant.food + screamRadius;
            var h = ant.home + screamRadius;
            var closerFood = f < other.food;
            var closerHome = h < other.home;
            var goFood = !other.carrying && closerFood;
            var goHome = other.carrying && closerHome;
            var newDir = Math.atan2(ant.y - other.y, ant.x - other.x) +
                Math.random() * 0.5 -
                0.25;
            if (closerFood) {
                other.food = f;
            }
            else if (closerHome) {
                other.home = h;
            }
            if (closerFood || closerHome) {
                updates.push([ant.x, ant.y, other.x, other.y, closerFood, closerHome]);
            }
            if (goFood || goHome) {
                other.direction = newDir;
                other.wandering = false;
            }
        });
    });
    return updates;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,